@page "/transaction"
@using Personal_Expense_Tracking.Models
@using Personal_Expense_Tracking.ViewModels
@inject NavigationManager NavigationManager

<!-- Wrap the entire content in a scrollable div -->
<div id="scrollable-container" style="height: 90vh; overflow: auto;">
    <MudContainer Class="mt-5 px-4">
        <MudGrid>
            <!-- Left Container for Total Transactions and Total Number of Transactions -->
            <MudItem xs="12" sm="6">
                <MudGrid>
                    <!-- Total Transactions -->
                    <MudItem xs="12">
                        <MudPaper Elevation="2" Class="p-4" Style="height: 200px;">
                            <h3>Total Transactions</h3>
                            <p>@account.Balance</p>
                        </MudPaper>
                    </MudItem>
                    <!-- Total Number of Transactions -->
                    <MudItem xs="12">
                        <MudPaper Elevation="2" Class="p-4" Style="height: 200px;">
                            <h3>Total Number of Transactions</h3>
                            <p>@account.TotalNumberOfTransaction</p>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <!-- Right Container for the Form -->
            <MudItem xs="12" sm="6">
                <MudPaper Elevation="2" Class="p-4" Style="height: 100%;">
                    <h1 class="text-center fs-2 fw-bold mb-3">Add Transaction</h1>
                    <p class="text-center text-muted mb-3 fs-6">Fill in the details below to add a transaction</p>

                    @if (!string.IsNullOrEmpty(StatusMessage))
                    {
                        <div class="status-message text-center mb-3">
                            <MudText Typo="Typo.h6" Color="@(StatusMessage.Contains("success") ? Color.Success : Color.Error)" Class="mb-4">
                                @StatusMessage
                            </MudText>
                        </div>
                    }

                    <!-- Form submission handler -->
                    <EditForm Model="@transaction" OnValidSubmit="HandleValidSubmitAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <!-- Date and Time Input (Use HTML input instead of InputText) -->
                        <div class="mb-3">
                            <label for="date-time" class="form-label">Transaction Date and Time</label>
                            <input id="date-time" @bind="transaction.Date" type="datetime-local" class="form-control" />
                        </div>
                        <!-- Remarks Input -->
                        <div class="mb-3">
                            <label for="remarks" class="form-label">Notes</label>
                            <InputText id="remarks" @bind-Value="transaction.Notes" class="form-control" placeholder="e.g This is for office supplies" />
                        </div>
                        <!-- Transaction Type Input -->
                        <div class="mb-3">
                            <label for="type" class="form-label">Transaction Type</label>
                            <select id="type" @bind="transaction.Type" class="form-select" required>
                                <option value="Credit">Credit</option>
                                <option value="Debit">Debit</option>
                            </select>
                        </div>
                        <!-- Tag Input -->
                        <div class="mb-3">
                            <label for="tag" class="form-label">Tag</label>
                            <InputText id="tag" @bind-Value="transaction.Tag" class="form-control" placeholder="Enter transaction tag" required />
                        </div>
                        <!-- Amount Input -->
                        <div class="mb-3">
                            <label for="amount" class="form-label">Amount</label>
                            <InputNumber id="amount" @bind-Value="transaction.Amount" class="form-control" placeholder="Enter amount" required />
                        </div>
                        <!-- Submit Button -->
                        <button type="submit" class="btn btn-primary w-100">Add Transaction</button>
                    </EditForm>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <!-- Transaction List (Full Width) -->
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="p-4 mt-5 mb-5">
                    <h3 class="text-center mb-4">Transaction List</h3>
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Date</th>
                                    <th>Notes</th>
                                    <th>Type</th>
                                    <th>Tags</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var transaction in transactionsViewModel.AllTransactions)
                                {
                                    <tr>
                                        <td>@transaction.Id</td>
                                        <td>@transaction.Date.ToString("yyyy-MM-dd HH:mm")</td>
                                        <td>@transaction.Notes</td>
                                        <td>@transaction.Type</td>
                                        <td>@transaction.Tag</td>
                                        <td>@transaction.Amount.ToString("C")</td>
                                        <td>@transaction.Status</td>
                                        <td>
                                            <button class="btn btn-danger" @onclick="() => DeleteTransaction(transaction.Id)">Delete</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>

    
</div>

@code {
    private Transactions transaction = new Transactions();
    private TransactionsViewModel transactionsViewModel = new TransactionsViewModel();
    private Account account = new Account();
    private string? StatusMessage;
    private List<Transactions> transactions;
    Color Color = Color.Success;

    protected override async Task OnInitializedAsync()
    {
        transactions = await transactionsViewModel.GetTransactions();
        await GetTotalTransactionsCount();
    }

    private async Task GetAccountDetails()
    {
        account.Balance = await transactionsViewModel.GetTotalBalance();
    }

    private async Task GetTotalTransactionsCount()
    {
        account.TotalNumberOfTransaction = await transactionsViewModel.GetTotalNumberOfTransactions();
    }

    private async Task HandleValidSubmitAsync()
    {
        await GetAccountDetails();

        if (transaction.Type == TransactionsType.Debit && transaction.Amount > account.Balance)
        {
            StatusMessage = "Insufficient balance. Please enter a valid amount.";
            transaction = new Transactions();
            StateHasChanged();
            await Task.Delay(2000);
            StatusMessage = null;
            StateHasChanged();
            return;
        }

        await transactionsViewModel.AddTransaction(transaction);
        transactions = await transactionsViewModel.GetTransactions();
        await GetTotalTransactionsCount();
        await GetAccountDetails();
        transaction = new Transactions();
        StatusMessage = "Transaction added successfully!";
        StateHasChanged();
        await Task.Delay(2000);
        StatusMessage = null;
        StateHasChanged();
    }

    private async Task DeleteTransaction(int transactionId)
    {
        await transactionsViewModel.DeleteTransaction(transactionId);
        transactions = await transactionsViewModel.GetTransactions();
        await GetTotalTransactionsCount();
        await GetAccountDetails();
    }

    
}
