@page "/dept"
@using Personal_Expense_Tracking.Models
@using Personal_Expense_Tracking.ViewModels
@inject NavigationManager NavigationManager

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.Large">
    <MudGrid>
        <!-- Left Column for Summary Info (Total Debts & Pending Debts) -->
        <MudItem xs="12" sm="12" md="6">
            <MudGrid>
                <!-- Total Debts Container -->
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4 mb-4">
                        <h2 class="text-center">Total Debts</h2>
                        <div class="text-center">
                            <h3>@TotalDebts</h3>
                        </div>
                    </MudPaper>
                </MudItem>

                <!-- Pending Debts Container -->
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4">
                        <h2 class="text-center">Pending Debts</h2>
                        <div class="text-center">
                            <h3>@PendingDebts</h3>
                        </div>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>

        <!-- Right Column for Add Debt Form -->
        <MudItem xs="12" sm="12" md="6">
            <MudPaper Elevation="2" Class="pa-4">
                <h1 class="text-center mb-3">Add Debt</h1>
                <p class="text-center text-muted mb-4">Fill in the details below to add a debt</p>

                @if (!string.IsNullOrEmpty(StatusMessage))
                {
                    <div class="alert @(StatusMessage.Contains("success") ? "alert-success" : "alert-danger")" role="alert">
                        @StatusMessage
                    </div>
                }

                <EditForm Model="@dept" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Source Input -->
                    <div class="mb-3">
                        <label for="source" class="form-label">Source</label>
                        <InputText id="source" @bind-Value="dept.Source" class="form-control" placeholder="Enter debt source" required />
                    </div>

                    <!-- Amount Input -->
                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount</label>
                        <InputNumber id="amount" @bind-Value="dept.Amount" class="form-control" placeholder="Enter amount" required />
                    </div>

                    <!-- Due Date and Time Input -->
                    <div class="mb-3">
                        <label for="due-date-time" class="form-label">Due Date and Time</label>
                        <input id="due-date-time" @bind="dept.DueDate" type="datetime-local" class="form-control" />
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="btn btn-primary w-100">Add Debt</button>
                </EditForm>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Debts List -->
    <MudPaper Elevation="2" Class="pa-4 mt-4">
        <h2 class="text-center">Manage Debts</h2>
        <MudDataGrid Items="@AllDebts" HorizontalScrollbar="true" Bordered="true" Dense="true">
            <Columns>
                <PropertyColumn Property="x => x.Id" Header="Id" />
                <PropertyColumn Property="x => x.Source" Header="Source" />
                <PropertyColumn Property="x => x.Amount" Header="Amount" />
                <PropertyColumn Property="x => x.DueDate" Header="Due Date" />
                <PropertyColumn Property="x => x.Status" Header="Status" />
                <TemplateColumn StickyRight="true" Header="Actions">
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Outlined.Clear" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudPaper>
</MudContainer>

@code {
    private Depts dept = new Depts();
    private string? StatusMessage;
    private List<Depts> AllDebts = new List<Depts>();
    private DeptsViewModel deptsViewModel = new DeptsViewModel();

    // Total debt amount
    private decimal TotalDebts => AllDebts.Sum(d => d.Amount);

    // Pending debts amount
    private decimal PendingDebts => AllDebts.Where(d => d.Status == Depts.DebtStatus.Pending).Sum(d => d.Amount);

    // Load all debts on initialization
    protected override async Task OnInitializedAsync()
    {
        await LoadDebts();
    }

    // Handle form submission asynchronously
    private async Task HandleValidSubmit()
    {
        try
        {
            await deptsViewModel.AddDebt(dept);
            StatusMessage = "Debt added successfully!";
            await LoadDebts();
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }

        dept = new Depts(); // Reset the dept model
    }

    // Load all debts from the ViewModel
    private async Task LoadDebts()
    {
        await deptsViewModel.LoadAllDebts();
        AllDebts = deptsViewModel.AllDebts;
    }

    // Clear a debt
    private async Task ClearDebt(int debtId)
    {
        try
        {
            await deptsViewModel.UpdateDebtStatus(debtId, Depts.DebtStatus.Cleared);
            StatusMessage = "Debt cleared successfully!";
            await LoadDebts();
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
    }
}
